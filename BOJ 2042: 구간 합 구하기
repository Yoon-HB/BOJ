#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <string>
#include <queue>
using namespace std;

long long init(vector<long long>& a, vector<long long>& tree, int node, int start, int end) {
	if (start == end) {
		return tree[node] = a[start];
	}
	else {
		return tree[node] = init(a, tree, node * 2, start, (start + end) / 2) + init(a, tree, node * 2 + 1, (start + end) / 2 + 1, end);
	}
}

long long sum(vector<long long>& tree, int node, int start, int end, int left, int right) {
	// case 1: [start, end] 앞 뒤에 [left, right]가 있는 경우,
	// 겹치지 않기 때문에 탐색을 더 이상 할 필요가 없다.
	if (left > end || right < start) return 0;

	// case 2: [start, end]가 [left, right]에 포함
	if (left <= start && end <= right) return tree[node];

	// case 3, 4: 왼쪽 자식과 오른쪽 자식을 루트로 하는 트리에서 다시 탐색 시작
	int mid = (start + end) / 2;
	return sum(tree, node * 2, start, mid, left, right) + sum(tree, node * 2 + 1, mid + 1, end, left, right);
}

void update(vector<long long>& tree, int node, int start, int end, int index, long long diff) {
	if (index < start || index > end) return;    // case 2
	tree[node] = tree[node] + diff;    // case 1// 리프 노드가 아닌 경우 자식도 변경해줘야 하기 때문에,// 리프 노드인지 검사를 하고 아래 자식 노드를 갱신해준다.
	if (start != end) {
		int mid = (start + end) / 2;
		update(tree, node * 2, start, mid, index, diff);
		update(tree, node * 2 + 1, mid + 1, end, index, diff);
	}
}

int main() {

	int N, M, K; //M은 수의 변경이 일어나는 횟수이고, K는 구간의 합을 구하는 횟수
	cin >> N >> M >> K;
	vector<long long> v1;

	for (int i = 0; i < N; i++) {
		long long n;
		cin >> n;
		v1.push_back(n);
	}
	/*A 배열의 크기가 N이라 하면, 리프 노드의 개수는 N이 되므로,
	이 트리의 높이 H는[logN]이 되고, 배열의 크기는 2 ^ (H + 1) 입니다. */
	int H = (int)ceil(log2(N));
	int ts = 1 << (H + 1);

	//long long  *tree = new long long[ts];
	vector<long long> tree(ts);

	init(v1, tree, 1, 0, N - 1);  //트리 초기화?

	

	for (int i = 0; i < M + K; i++) {
		long long a, b, c;
		cin >> a >> b >> c;
		if (a == 1) {
			long long diff = c - v1[b-1]; //b번째 수를 c로 변경한다면, 그 수가 얼마만큼 변했는지를 알아야 한다. 이 수를 diff
			update(tree, 1, 0, N - 1, b-1, diff);
			v1[b - 1] = c;
		}
		else if (a == 2) {
			long long res = sum(tree, 1, 0, N - 1, b-1, c-1); // b(1 ≤ b ≤ N)번째 수부터 c(b ≤ c ≤ N)번째 수까지의 합
			cout << res << "\n";

		}
	}

	return 0;
}

